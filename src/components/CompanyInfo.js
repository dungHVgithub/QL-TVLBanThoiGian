import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { Container, Card, Row, Col, Button, Form } from "react-bootstrap";
import { authApis, endpoints } from "../configs/Api";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "../static/companyInfo.css"; // Import file CSS

const CompanyInfo = () => {
  const { companyId } = useParams();
  const [companyData, setCompanyData] = useState([]); // D·ªØ li·ªáu companyImages
  const [companyInfo, setCompanyInfo] = useState(null); // D·ªØ li·ªáu CompanyInformation
  const [showEditForm, setShowEditForm] = useState(false);
  const [formData, setFormData] = useState({ name: "", address: "", taxCode: "" });

  // H√†m t·∫£i th√¥ng tin c√¥ng ty (CompanyInformation)
  const loadCompanyInfo = async () => {
    try {
      const res = await authApis().get(`${endpoints["company_info"]}/${companyId}`);
      console.log("Company Info Data:", res.data);
      setCompanyInfo(res.data);
      setFormData({
        name: res.data.name || "",
        address: res.data.address || "",
        taxCode: res.data.taxCode || "",
      });
    } catch (err) {
      console.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c√¥ng ty:", err);
      toast.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c√¥ng ty!");
    }
  };

  // H√†m t·∫£i danh s√°ch ·∫£nh (CompanyImages)
  const loadCompanyImages = async () => {
    try {
      const res = await authApis().get(`${endpoints["company_images"]}/${companyId}`);
      console.log("Company Images Data:", res.data);
      setCompanyData(res.data || []); // ƒê·∫£m b·∫£o l√† m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    } catch (err) {
      console.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ·∫£nh:", err);
      setCompanyData([]); // ƒê·∫∑t r·ªóng n·∫øu c√≥ l·ªói
    }
  };

  useEffect(() => {
    loadCompanyInfo(); // T·∫£i th√¥ng tin c√¥ng ty
    loadCompanyImages(); // T·∫£i danh s√°ch ·∫£nh
  }, [companyId]);

  // X·ª≠ l√Ω khi b·∫•m n√∫t "C·∫≠p nh·∫≠t th√¥ng tin c√¥ng ty" ho·∫∑c "L∆∞u"
  const handleToggleEditForm = async () => {
    if (showEditForm) {
      // G·ª≠i PUT request khi b·∫•m "L∆∞u"
      try {
        const response = await authApis().put(`${endpoints["company_info"]}/${companyId}`, formData);
        console.log("Update success:", response.data);
        toast.success("C·∫≠p nh·∫≠t th√¥ng tin c√¥ng ty th√†nh c√¥ng!");
        setShowEditForm(false);
        await loadCompanyInfo(); // T·∫£i l·∫°i th√¥ng tin c√¥ng ty sau khi c·∫≠p nh·∫≠t
      } catch (err) {
        console.error("Error updating company info:", err);
        toast.error("C·∫≠p nh·∫≠t th√¥ng tin c√¥ng ty th·∫•t b·∫°i!");
      }
    } else {
      setShowEditForm(true);
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi d·ªØ li·ªáu trong form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  // X·ª≠ l√Ω khi b·∫•m n√∫t "C·∫≠p nh·∫≠t ·∫£nh"
  const handleUpdateImage = async (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);
    formData.append("companyId", companyId);

    try {
      const response = await authApis().post(endpoints["company_images"], formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      console.log("Image uploaded:", response.data);
      toast.success("T·∫£i ·∫£nh l√™n th√†nh c√¥ng!");
      await loadCompanyImages(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ·∫£nh sau khi upload
    } catch (err) {
      console.error("Error uploading image:", err);
      toast.error("T·∫£i ·∫£nh l√™n th·∫•t b·∫°i!");
    }
  };

  // X·ª≠ l√Ω x√≥a ·∫£nh
  const handleDeleteImage = async (imageId) => {
    try {
      await authApis().delete(`${endpoints["company_images"]}/${companyId}/${imageId}`);
      toast.success("X√≥a ·∫£nh th√†nh c√¥ng!");
      await loadCompanyImages(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ·∫£nh sau khi x√≥a
    } catch (err) {
      console.error("Error deleting image:", err);
      toast.error("X√≥a ·∫£nh th·∫•t b·∫°i!");
    }
  };

  if (!companyInfo) {
    return <p className="text-center mt-5">ƒêang t·∫£i th√¥ng tin c√¥ng ty...</p>;
  }

  return (
    <Container className="mt-5">
      <ToastContainer />
      <Card className="shadow p-4">
        <h3 className="mb-4 text-center">Th√¥ng Tin C√¥ng Ty</h3>
        <Row>
          {/* C·ªôt tr√°i: Danh s√°ch ·∫£nh (30%) */}
          <Col md={4} className="image-list-container">
            <h5 className="mb-3 text-center">·∫¢nh C√¥ng Ty</h5>
            {companyData.length > 0 ? (
              <div className="image-list">
                {companyData.map((item) => (
                  <div
                    key={item.id}
                    className="image-item"
                    onMouseEnter={(e) => e.currentTarget.classList.add("hover")}
                    onMouseLeave={(e) => e.currentTarget.classList.remove("hover")}
                  >
                    <img
                      src={item.imagePath || "/default-company-logo.png"}
                      alt={item.caption || "·∫¢nh c√¥ng ty"}
                      className="img-fluid rounded mb-3"
                    />
                    <p className="text-center">{item.caption || "Kh√¥ng c√≥ ch√∫ th√≠ch"}</p>
                    <div className="delete-icon" onClick={() => handleDeleteImage(item.id)}>
                      üóëÔ∏è
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-center">Ch∆∞a c√≥ ·∫£nh c√¥ng ty. Vui l√≤ng t·∫£i ·∫£nh l√™n!</p>
            )}
            {/* Form ƒë·ªÉ upload ·∫£nh m·ªõi */}
            <Form onSubmit={handleUpdateImage} className="mt-3">
              <Form.Group className="mb-3">
                <Form.Label>Ch·ªçn ·∫£nh m·ªõi</Form.Label>
                <Form.Control type="file" name="file" />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>Ch√∫ th√≠ch</Form.Label>
                <Form.Control type="text" name="caption" placeholder="Nh·∫≠p ch√∫ th√≠ch" />
              </Form.Group>
              <Button variant="primary" type="submit">
                T·∫£i ·∫£nh l√™n
              </Button>
            </Form>
          </Col>

          {/* C·ªôt ph·∫£i: Th√¥ng tin c√¥ng ty (70%) */}
          <Col md={8}>
            <Row>
              <Col md={12} className="company-info">
                <p><strong>üè¢ T√™n c√¥ng ty:</strong> {companyInfo.name || "Ch∆∞a c·∫≠p nh·∫≠t"}</p>
              </Col>
            </Row>
            <Row>
              <Col md={12} className="company-info">
                <p><strong>üìç ƒê·ªãa ch·ªâ:</strong> {companyInfo.address || "Ch∆∞a c·∫≠p nh·∫≠t"}</p>
              </Col>
            </Row>
            <Row>
              <Col md={12} className="company-info">
                <p><strong>üìú M√£ thu·∫ø:</strong> {companyInfo.taxCode || "Ch∆∞a c·∫≠p nh·∫≠t"}</p>
              </Col>
            </Row>
            <Row>
              <Col md={12} className="company-info">
                <p><strong>Th√¥ng b√°o:</strong> Th√™m ƒë·ªß 3 h√¨nh ·∫£nh ƒë·ªÉ qu·∫£n tr·ªã vi√™n x√©t duy·ªát</p>
              </Col>
            </Row>
            {/* N√∫t "C·∫≠p nh·∫≠t th√¥ng tin c√¥ng ty" v√† "C·∫≠p nh·∫≠t ·∫£nh" */}
            <Row className="mt-3">
              <Col md={12} className="button-container">
                <Button
                  variant="primary"
                  onClick={handleToggleEditForm}
                  className="me-2"
                >
                  {showEditForm ? "L∆∞u" : "C·∫≠p nh·∫≠t th√¥ng tin c√¥ng ty"}
                </Button>
                <Button
                  variant="secondary"
                  onClick={() => document.querySelector("form").scrollIntoView({ behavior: "smooth" })}
                >
                  C·∫≠p nh·∫≠t ·∫£nh
                </Button>
              </Col>
            </Row>

            {/* Popup form ch·ªânh s·ª≠a th√¥ng tin c√¥ng ty */}
            {showEditForm && (
              <div className={`edit-form ${showEditForm ? "slide-down" : ""}`}>
                <Form>
                  <Form.Group className="mb-3">
                    <Form.Label>T√™n c√¥ng ty</Form.Label>
                    <Form.Control
                      type="text"
                      name="name"
                      value={formData.name}
                      onChange={handleInputChange}
                      placeholder="Nh·∫≠p t√™n c√¥ng ty"
                    />
                  </Form.Group>
                  <Form.Group className="mb-3">
                    <Form.Label>ƒê·ªãa ch·ªâ</Form.Label>
                    <Form.Control
                      type="text"
                      name="address"
                      value={formData.address}
                      onChange={handleInputChange}
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
                    />
                  </Form.Group>
                  <Form.Group className="mb-3">
                    <Form.Label>M√£ thu·∫ø</Form.Label>
                    <Form.Control
                      type="text"
                      name="taxCode"
                      value={formData.taxCode}
                      onChange={handleInputChange}
                      placeholder="Nh·∫≠p m√£ thu·∫ø"
                    />
                  </Form.Group>
                </Form>
              </div>
            )}
          </Col>
        </Row>
      </Card>
    </Container>
  );
};

export default CompanyInfo;