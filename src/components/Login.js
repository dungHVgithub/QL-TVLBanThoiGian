import { useContext, useState } from "react";
import { Button, FloatingLabel, Form, Alert } from "react-bootstrap";
import Api, { authApis, endpoints } from "../configs/Api";
import { MyDispatchContext } from "../configs/MyContexts";
import { useNavigate } from "react-router-dom";
import MySpinner from "./layouts/MySpinner";
import { auth, googleProvider, facebookProvider } from "../configs/FirebaseConfig";
import { signInWithPopup } from "firebase/auth";
import { FaFacebook, FaGoogle, FaSignInAlt } from "react-icons/fa";
import cookie from "react-cookies";
import "../static/login.css"; // Import CSS t√πy ch·ªânh

const Login = () => {
    const info = [
        { label: "üë§ T√™n ƒëƒÉng nh·∫≠p", type: "text", field: "username" },
        { label: "üîí M·∫≠t kh·∫©u", type: "password", field: "password" }
    ];

    const dispatch = useContext(MyDispatchContext);
    const nav = useNavigate();

    const [user, setUser] = useState({ username: "", password: "" });
    const [loading, setLoading] = useState(false);
    const [msg, setMsg] = useState("");

    const validateUsername = (username) => {
        const usernameRegex = /^[a-zA-Z0-9_]+$/;
        return usernameRegex.test(username);
    };

    const login = async (e) => {
        e.preventDefault();

        if (!user.username || user.username.trim() === "") {
            setMsg("‚ùå T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            return;
        }

        if (!validateUsername(user.username)) {
            setMsg("‚ùå T√™n ƒëƒÉng nh·∫≠p ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi!");
            return;
        }

        if (!user.password || user.password.trim() === "") {
            setMsg("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            return;
        }

        try {
            setLoading(true);
            setMsg(""); // X√≥a th√¥ng b√°o c≈©
            const res = await Api.post(endpoints.login, user);
            const token = res.data.token;
            cookie.save("token", token);
            localStorage.setItem("token", token);
            const profileRes = await authApis().get(endpoints.profile);
            const userInfo = profileRes.data;

            dispatch({
                type: "login",
                payload: {
                    token: token,
                    username: userInfo.username,
                    name: userInfo.name,
                    role: userInfo.role,
                    id: userInfo.id,
                },
            });

            setMsg("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
            setTimeout(() => {
                if (userInfo.role === "ROLE_EMPLOYEE" || userInfo.role === "ROLE_ADMIN")
                    nav("/");
                else if (userInfo.role === "ROLE_EMPLOYER")
                    nav("/employer");
                else nav("/");
            }, 2000); // ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi ƒëi·ªÅu h∆∞·ªõng

        } catch (err) {
            console.error("L·ªói ƒëƒÉng nh·∫≠p:", err);
            setMsg("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i! Vui l√≤ng ki·ªÉm tra l·∫°i t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.");
        } finally {
            setLoading(false);
        }
    };

    const setState = (value, field) => {
        setUser({ ...user, [field]: value });
    };

    const loginWithProvider = async (provider) => {
        try {
            setLoading(true);
            setMsg("üîÑ Vui l√≤ng kh√¥ng ƒë√≥ng c·ª≠a s·ªï popup cho ƒë·∫øn khi ho√†n t·∫•t ƒëƒÉng nh·∫≠p!");

            const result = await signInWithPopup(auth, provider);
            const firebaseUser = result.user;

            let email = firebaseUser.email;
            if (!email && provider === facebookProvider) {
                email = prompt("Facebook kh√¥ng cung c·∫•p email. Nh·∫≠p email ƒë·ªÉ ti·∫øp t·ª•c:");
                if (!email) {
                    setMsg("‚ùå Email b·∫Øt bu·ªôc ƒë·ªÉ ti·∫øp t·ª•c ƒëƒÉng nh·∫≠p!");
                    throw new Error("Email b·∫Øt bu·ªôc!");
                }
            }

            const payload = {
                name: firebaseUser.displayName,
                email,
                avatar: firebaseUser.photoURL,
            };

            const res = await Api.post(endpoints.oauth, payload);
            const token = res.data.token;

            cookie.save("token", token);
            localStorage.setItem("token", token);

            const profileRes = await authApis().get(endpoints.profile);
            const userInfo = profileRes.data;

            dispatch({
                type: "login",
                payload: {
                    token: token,
                    ...userInfo,
                },
            });

            setMsg("‚úÖ ƒêƒÉng nh·∫≠p b·∫±ng m·∫°ng x√£ h·ªôi th√†nh c√¥ng!");
            setTimeout(() => {
                nav("/");
            }, 2000); // ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi ƒëi·ªÅu h∆∞·ªõng

        } catch (err) {
            console.error("OAuth login error:", err);
            if (err.code === "auth/account-exists-with-different-credential") {
                setMsg("‚ö†Ô∏è T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng nh·∫≠p b·∫±ng Google. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng Google thay v√¨ Facebook.");
            } else if (err.code === "auth/popup-closed-by-user") {
                setMsg("‚ö†Ô∏è B·∫°n ƒë√£ ƒë√≥ng c·ª≠a s·ªï ƒëƒÉng nh·∫≠p qu√° s·ªõm.");
            } else {
                setMsg("‚ùå ƒêƒÉng nh·∫≠p m·∫°ng x√£ h·ªôi th·∫•t b·∫°i!");
            }
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="login-container">
            <div className="login-card">
                <div className="login-header">
                    <h1 className="login-title">üöÄ Ch√†o M·ª´ng Tr·ªü L·∫°i</h1>
                    <p className="login-subtitle">ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c h√†nh tr√¨nh c·ªßa b·∫°n</p>
                </div>

                <Form onSubmit={login} className="login-form">
                    {msg && (
                        <Alert variant={msg.startsWith("‚úÖ") ? "success" : "danger"} className="mb-3">
                            {msg}
                        </Alert>
                    )}

                    {info.map((f) => (
                        <div key={f.field} className="login-form-group">
                            <FloatingLabel
                                controlId={`floating-${f.field}`}
                                label={f.label}
                            >
                                <Form.Control
                                    type={f.type}
                                    placeholder={f.label}
                                    value={user[f.field] || ""}
                                    onChange={(e) => setState(e.target.value, f.field)}
                                    required
                                />
                            </FloatingLabel>
                        </div>
                    ))}

                    <div className="login-divider">
                        <span>Ch·ªçn ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p</span>
                    </div>

                    {loading ? (
                        <div className="login-spinner-container">
                            <MySpinner />
                        </div>
                    ) : (
                        <div className="login-buttons-container">
                            <Button 
                                type="submit" 
                                className="login-btn login-btn-primary"
                                disabled={loading}
                            >
                                <FaSignInAlt />
                                ƒêƒÉng nh·∫≠p
                            </Button>
                            
                            <Button 
                                className="login-btn login-btn-facebook"
                                onClick={() => loginWithProvider(facebookProvider)}
                                disabled={loading}
                            >
                                <FaFacebook />
                                Facebook
                            </Button>
                            
                            <Button 
                                className="login-btn login-btn-google"
                                onClick={() => loginWithProvider(googleProvider)}
                                disabled={loading}
                            >
                                <FaGoogle />
                                Google
                            </Button>
                        </div>
                    )}
                </Form>
            </div>
        </div>
    );
};

export default Login;